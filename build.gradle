plugins {
    id 'idea'
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.0.74'
    id "me.shedaniel.unified-publishing" version "0.1.+"
}

tasks.named('wrapper', Wrapper).configure {
    // Define wrapper values here so as to not have to always do so when updating gradlew.properties.
    // Switching this to Wrapper.DistributionType.ALL will download the full gradle sources that comes with
    // documentation attached on cursor hover of gradle classes and methods. However, this comes with increased
    // file size for Gradle. If you do switch this to ALL, run the Gradle wrapper task twice afterwards.
    // (Verify by checking gradle/wrapper/gradle-wrapper.properties to see if distributionUrl now points to `-all`)
    distributionType = Wrapper.DistributionType.BIN
}

version = project.minecraft_version + "-NeoForge-" + project.mod_version
group = project.maven_group
var realVersion = project.mod_version + '+neoforge'

repositories {
    mavenLocal()
    maven { url "https://api.modrinth.com/maven" }
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://dvs1.progwml6.com/files/maven/" }
    maven { url "https://modmaven.dev" }
    maven { url "https://maven.su5ed.dev/releases" }
    maven {
        // Shedaniel's maven (Architectury API)
        url = "https://maven.architectury.dev"
        content {
            includeGroup "dev.architectury"
        }
    }
    maven {
        // saps.dev Maven (KubeJS and Rhino)
        url = "https://maven.saps.dev/minecraft"
        content {
            includeGroup "dev.latvian.mods"
            includeGroup "dev.latvian.apps"
        }
    }
    maven {
        // For com.github.rtyley:animated-gif-lib-for-java, a KubeJS dependency
        url 'https://jitpack.io'
        content {
            includeGroup "com.github.rtyley"
        }
    }
    flatDir { dir 'libs' }
}

base {
    archivesName = project.archives_base_name
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

neoForge {
    // Specify the version of NeoForge to use.
    version = project.neo_version

//    parchment {
//        mappingsVersion = project.parchment_mappings_version
//        minecraftVersion = project.parchment_minecraft_version
//    }

    // This line is optional. Access Transformers are automatically detected
    // accessTransformers = project.files('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            client()
            ideName = "Run ${project.mod_id} - Client"
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            ideName = "Run ${project.mod_id} - Server"
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()
            ideName = "Run ${project.mod_id} - Data"
            // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
            // gameDirectory = project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        // applies to all the run configs above
        configureEach {
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        // define mod <-> source bindings
        // these are used to tell the game which sources are for which mod
        // mostly optional in a single mod project
        // but multi mod projects should define one per mod
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

// Sets up a dependency configuration called 'localRuntime'.
// This configuration should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {
    implementation "maven.modrinth:jade:${project.jade_version}+neoforge"
    implementation "maven.modrinth:kiwi:${project.kiwi_version}+neoforge"
    annotationProcessor "maven.modrinth:kiwi:${project.kiwi_version}+neoforge"
    implementation "maven.modrinth:cloth-config:${project.cloth_config_version}+neoforge"

    implementation "me.shedaniel:RoughlyEnoughItems-neoforge:${project.rei_version}"
    compileOnly "me.shedaniel:REIPluginCompatibilities-forge-annotations:12.+"

    implementation "mezz.jei:jei-${project.minecraft_version}-common-api:${project.jei_version}"
    implementation "mezz.jei:jei-${project.minecraft_version}-neoforge-api:${project.jei_version}"
    implementation "mezz.jei:jei-${project.minecraft_version}-neoforge:${project.jei_version}"

//    implementation "org.sinytra.forgified-fabric-api:forgified-fabric-api:0.107.0+2.0.22+1.21.1"
    implementation "org.sinytra.forgified-fabric-api:fabric-api-base:0.4.42+d1308ded19"
    // https://github.com/neoforged/ModDevGradle?tab=readme-ov-file#jar-in-jar
    jarJar(implementation("org.sinytra.forgified-fabric-api:fabric-particles-v1:4.0.2+824f924c19")) {

    }

    implementation "dev.latvian.mods:kubejs-neoforge:${kubejs_version}"
}

jar {
    exclude("/assets/${project.mod_id}/lang/en_us.existing.json")
    manifest {
        attributes([
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : realVersion,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

unifiedPublishing {
    project {
        displayName = "[NeoForge $project.supported_version] $project.mod_version"
        version = realVersion // Optional, Inferred from project by default
        changelog = file("CHANGELOG.md").exists() ? file("CHANGELOG.md").text : "" // Optional, in markdown format
        releaseType = project.release_type // Optional, use "release", "beta" or "alpha"
        gameVersions = [project.minecraft_version]
        gameLoaders = ["neoforge"]


        mainPublication tasks.jar // Declares the publicated jar

        if (System.getenv("CURSE_TOKEN") != null) {
            curseforge {
                token = System.getenv("CURSE_TOKEN")
                id = "567403" // Required, must be a string, ID of CurseForge project

                relations { // Optional, Inferred from the relations above by default
                    depends "kiwi"
                    optional "cloth-config"
                }
            }
        }

        if (System.getenv("MODRINTH_TOKEN") != null) {
            modrinth {
                token = System.getenv("MODRINTH_TOKEN")
                id = "TdN6LxjM" // Required, must be a string, ID of Modrinth project

                relations { // Optional, Inferred from the relations above by default
                    depends "kiwi"
                    optional "cloth-config"
                }
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}